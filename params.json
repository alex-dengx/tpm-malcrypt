{"name":"Tpm-malcrypt","tagline":"An example malicious payload controller and obfuscator assisted by TPM-protected keys","body":"tpm-malcrypt\r\n============\r\n\r\nAn example malicious payload controller and obfuscator assisted by TPM-protected keys.\r\n\r\n## malcrypter\r\n\r\nThis is the offline (server-side) component that generates the executed payload from the \r\ndecrypter stub and your choice of encrypted payload.\r\n\r\n### Installation:\r\n\r\n  1. Grab PyDbg from: http://www.lfd.uci.edu/~gohlke/pythonlibs/\r\n  2. Within CMD: `SET VS90COMNTOOLS=%VS120COMNTOOLS%`\r\n  3. `pip install pefile pycrypto`\r\n\r\n## malcrypt\r\n\r\nThis is a Windows VS2013 solution containing two projects. The logic can be rewritten on OSX \r\nor Linux, depending on the intended target.\r\n\r\n### Part 1: tpm-keyextract\r\n\r\nDetect a TPM on a client and create a new encryption keypair using standard protections.\r\nReturn the public key component to be transmitted back to a encrypted PE generator.\r\n\r\n### Part 2: malcrypt\r\n\r\nUsing an input public key and input malicious payload, generate and return a self-decrypting\r\nPE that decrypts and executes in-memory.\r\n\r\nAlthough the output PE can be executed on any machine, only a *target* machine will have\r\nthe private key pair in it's crypto-store. Thus only a *target* machine will decrypt and \r\nexecuted the original input payload. \r\n\r\nThe malcrypt application involves several components and processes:\r\n  * Target OS crypto-store accesses.\r\n  * An in-memory decryption/execution stub.\r\n  * An encryptor and PE section injector.\r\n\r\nFor the crypto-store access, malcrypt assumes the input public key was created with no or\r\nknown controls by `tpm-keyextract`. The security of the private key is not critical to\r\nmalcrypt if a TPM was used to generate the key pair. Malcrypt intends to limit the \r\nexecution of the input payload to a *target* system. There are trusted computing concerns\r\nrelated to proving a TPM was used to create the keypair, but they are outside the scope\r\nof the example PoC implementation.\r\n\r\nReferences\r\n----------\r\n\r\n  * The original TPM Malware: https://www.cs.utexas.edu/~adunn/pubs/malware-tpm.pdf\r\n  * DEF CON 22 WAGONBED: https://www.defcon.org/html/defcon-22/dc-22-speakers.html#Datko\r\n  * Windows PCP Tool: http://research.microsoft.com/en-us/downloads/74c45746-24ad-4cb7-ba4b-0c6df2f92d5d/\r\n\r\nLicense\r\n-------\r\n\r\nMIT and Microsoft MSR-LA.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}